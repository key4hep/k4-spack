

# for compatibility with old git versions on centos
variables:
  GIT_STRATEGY: clone
  K4_JOBTYPE: Release
  SPACK_VERSION: ""

stages:
    - compilation
    - buildtest
    - deployment
    - wait
    - installtest

### create an artifact with a pre-configured spack on each push
setup_spack_push:
    stage: compilation
    tags:
        - k4-build-spack-nightlies
    only:
      refs:
          - pushes
          - merge_requests
          - schedules
    script:
        # set up spack inside the k4-spack repo
        - source scripts/ci_setup_spack.sh

    artifacts:
        paths:
            - key4hep-spack_centos7-cvmfs.tar.gz
            - key4hep-spack.tar.gz
        expire_in: 1 week

#### Nightly build of key4hep-stack
# this job expects the following setup on the runner:
# * environment variables GITHUB_TOKEN and GITHUB_USER
#   set in .bashrc or via gitlab ci - to be able to query the commits on github
# *  (for the nightlies) existing installation of key4hep-stack (stable version) in /cvmfs/sw.hsf.org/spackages
#   (or whatever is defined in upstreams.yaml)
#   this may be read-only - could be delivered by cvmfs
# * writeable directory in /cvmfs/sw-nightlies.hsf.org 
#   (or whatever is defined in config.yaml)
#  
# for the cvmfs deployment:
# * the gitlab-runner user must be able to ssh into the cvmfs publisher
# * the cvmfs publisher must be able to rsync with the build machine
build-spack-nightlies:
    stage: compilation
    tags:
        - k4-build-spack-nightlies
    only:
      refs:
          - schedules # Only execute this on scheduled "nightly" pipelines
      variables:
          - $K4_JOBTYPE == "Nightlies"
    script:
        # set up spack inside the k4-spack repo
        - source scripts/ci_setup_spack.sh
        - source spack/share/spack/setup-env.sh
        - cp ${PWD}/spack/var/spack/repos/key4hep-spack/config/cvmfs_build/config-nightlies.yaml spack/etc/spack/config.yaml
        - export K4_LATEST_SETUP_PATH=/cvmfs/sw-nightlies.hsf.org/spackages/latest/setup.sh
        # compile onwards and upwards
        - spack install --fail-fast --no-checksum key4hep-stack@master-`date -I` 



### deploy the nightlies to cvmfs
deploy-cvmfs-nightlies:
    stage: deployment
    needs: ["build-spack-nightlies"]
    tags:
        - k4-build-spack-nightlies
    only:
      refs:
          - schedules # Only execute this on scheduled "nightly" pipelines
      variables:
          - $K4_JOBTYPE == "Nightlies"
    script:
        - ssh cvswnighthsforg@cvmfs-sw-nightlies-hsf-org.cern.ch ' bash -c ./cvmfs_deploy.sh'


#### Release build of key4hep-stack
# this job expects the following setup on the runner:

# * writeable directory in /cvmfs/sw.hsf.org 
#   (or whatever is defined in config.yaml)
#  
# for the cvmfs deployment:
# * the gitlab-runner user must be able to ssh into the cvmfs publisher
# * the cvmfs publisher must be able to rsync with the build machine
build-spack-release:
    stage: compilation
    tags:
        - k4-build-spack-release
    only:
      refs:
          - tags
          - schedules # Only execute this on scheduled pipelines
      variables:
          - $K4_JOBTYPE == "Release"
    script:
        # set up spack inside the k4-spack repo
        - source scripts/ci_setup_spack.sh
        # get the right config files to the right places
        - cp ${PWD}/spack/var/spack/repos/key4hep-spack/config/cvmfs_build/config.yaml spack/etc/spack/config.yaml
        - rm spack/etc/spack/upstreams.yaml
        - export K4_LATEST_SETUP_PATH=/cvmfs/sw.hsf.org/spackages/latest/setup.sh
        # if this workflow has been started by a tag, use the tag version. if not, use todays date
        - if [ -z "$CI_COMMIT_TAG" ]; then export K4STACK_VERSION=`date -I`; else export K4STACK_VERSION=$CI_COMMIT_TAG;  fi 
        - if [ ! -z "$CI_BUILD_TAG" ]; then export K4STACK_VERSION=$CI_BUILD_TAG;  fi 
        # compile onwards and upwards
        - echo $K4STACK_VERSION
        - spack install --fail-fast key4hep-stack@$K4STACK_VERSION | tee -a key4hep-stack-install.log
        - K4_FULL_SETUP_PATH=$(readlink -f ${K4_LATEST_SETUP_PATH})
        - echo "K4_FULL_SETUP_PATH=${K4_FULL_SETUP_PATH}" > spackbuild.env
    artifacts:
      reports:
        dotenv: spackbuild.env

buildtest-spack-release:
    stage: buildtest
    needs: ["build-spack-release"]
    tags:
        - k4-build-spack-release
    only:
      refs:
          - tags
          - schedules # Only execute this on scheduled "nightly" pipelines
      variables:
          - $K4_JOBTYPE == "Release"
    script:
        - echo ${K4_FULL_SETUP_PATH}
        - source ${K4_FULL_SETUP_PATH}
        - ./scripts/ci_install_tests.sh


deploy-cvmfs-release:
    stage: deployment
    needs: ["build-spack-release", "buildtest-spack-release"]
    tags:
        - k4-build-spack-release
    only:
      refs:
          - tags
          - schedules # Only execute this on scheduled "nightly" pipelines
      variables:
          - $K4_JOBTYPE == "Release"
    script:
        - ssh cvswhsforg@cvmfs-sw-hsf-org.cern.ch ' bash -c ./cvmfs_deploy.sh'

wait-cvmfs-release:
    stage: wait
    needs: ["deploy-cvmfs-release", "build-spack-release"]
    timeout: 20m
    tags:
        - k4-spack-test
    only:
      refs:
          - tags
          - schedules # Only execute this on scheduled "nightly" pipelines
      variables:
          - $K4_JOBTYPE == "Release"
    script:
        - echo ${K4_FULL_SETUP_PATH}
        - while [ ! -f ${K4_FULL_SETUP_PATH} ]; do sleep 10; done

test-cvmfs-release:
    stage: installtest
    needs: ["deploy-cvmfs-release", "build-spack-release", "wait-cvmfs-release"]
    tags:
        - k4-spack-test
    only:
      refs:
          - tags
          - schedules # Only execute this on scheduled "nightly" pipelines
      variables:
          - $K4_JOBTYPE == "Release"
    script:
        - echo ${K4_FULL_SETUP_PATH}
        - source ${K4_FULL_SETUP_PATH}
        - ./scripts/ci_install_tests.sh


